import math
import numpy as np
import matplotlib.pyplot as plt


k = 2.5  # control gain
Kp = 5.0  # speed proportional gain
dt = 0.04  # [s] time difference
L = 0.3  # [m] Wheel base of vehicle
max_steer = np.radians(20.0)  # [rad] max steering angle

show_animation = False
use_actions = True

actions = [np.radians(-20),
           np.radians(-10),
           np.radians(-5),
           np.radians(0),
           np.radians(5),
           np.radians(10),
           np.radians(20)]

def choose_angle(a, action=None):
    if action is None:
        action = actions
    d = np.inf
    idx = None
    for i, c in enumerate(action):
        if a * c > 0:
            if abs(c-a) < d:
                d = abs(c - a)
                idx = i
    return action[idx]


def normalize_angle(angle):
    """
    Normalize an angle to [-pi, pi]

    Args:
        angle: (float)
    
    Returns:
        (float) Angle in radian in [-pi, pi]
    """

    while angle > np.pi:
        angle -= 2.0 * np.pi

    while angle < -np.pi:
        angle += 2.0 * np.pi

    return angle

def calc_target_index(state, cx, cy):
    """
    Compute index in the trajectory list of the target

    Args:
        state: (State object)
        cx: ([float])
        cy: ([float])

    Returns:
        (int, float) target index, error_front_axle
    """
    
    # Calc front axle position
    # rear axle position = (x, y)
    # frony axle position = (x + L * cos(yaw), y + L * sin(yaw))
    fx = state.x + L * np.cos(state.yaw)
    fy = state.y + L * np.sin(state.yaw)

    # Search the index of the nearest point to the front axle
    dx = [fx - icx for icx in cx]
    dy = [fy - icy for icy in cy]
    d = np.hypot(dx, dy)
    target_idx = np.argmin(d)

    # Project RMS error onto front axle vector
    front_axle_vec = [-np.cos(state.yaw + np.pi/2),
                      -np.sin(state.yaw + np.pi/2)]
    error_front_axle = np.dot([dx[target_idx], dy[target_idx]], front_axle_vec)

    return target_idx, error_front_axle

def pid_control(target, current):
    """
    Proportional control for the speed

    Args:
        target: (float)
        current: (float)

    Returns:
        (float)
    """

    return Kp * (target - current)

def stanley_control(state, cx, cy, cyaw, last_target_idx):
    """
    Stanley steering control

    Args:
        state: (State object)
        cx: ([float])
        cy: ([float])
        cyaw: ([float])
        last_target_idx: (int)

    Returns:
        (float, int) steering angle, current target idx
    """

    current_target_idx, error_front_axle = calc_target_index(state, cx, cy)

    # theta_e corrects the heading error
    theta_e = normalize_angle(cyaw[current_target_idx] - state.yaw)
    # theta_d corrects the cross track error
    theta_d = np.arctan2(k * error_front_axle, state.v)
    # Steering control
    delta = theta_e + theta_d

    if use_actions:
        return choose_angle(delta), current_target_idx
    
    if abs(delta) < max_steer:
        return delta, current_target_idx
    else:
        return max_steer * np.sign(delta), current_target_idx


class State(object):
    """
    Class representing the state of a vehicle

    Args:
        x: (float) x-coordinate
        y: (float) y-coordinate
        yaw: (float) yaw angle
        v: (float) speed
    """

    def __init__(self, x=0.0, y=0.0, yaw=0.0, v=0.0):
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v

    def update(self, acceleration, delta):
        """
        Update the state of the vehicle

        Stanley Control uses bicycle model.

        Args:
            acceleration: (float) Acceleration
            delta: (float) Steering
        """
        delta = np.clip(delta, -max_steer, max_steer)

        self.x += self.v * np.cos(self.yaw) * dt
        self.y += self.v * np.sin(self.yaw) * dt
        self.yaw += self.v / L * np.tan(delta) * dt
        self.yaw = normalize_angle(self.yaw)
        self.v += acceleration * dt



def simulate(x, y, yaw, end_idx=-1, **kwargs):
    '''
    Simulate stanley control

    Args:
        x: car x coordinate
        y: car y coordinate
        yaw: car yaw

    Kwargs:
        cx:
        cy:
        cyaw:
        ck:
        s:
        start_idx:
        end_idx:
        inner_course:
        outer_course:
        center_course:
    '''

    cx = kwargs['cx']
    cy = kwargs['cy']
    cyaw = kwargs['cyaw']
    ck = kwargs['ck']
    s = kwargs['s']
    start_idx = kwargs.get('start_idx', 0)
    inner_course = kwargs.get('inner_course', None)
    outer_course = kwargs.get('outer_course', None)
    center_course = kwargs.get('center_course', None)

    if inner_course is not None:
        inner_x, inner_y = inner_course.T
    
    if outer_course is not None:
        outer_x, outer_y = outer_course.T

    if center_course is not None:
        center_x, center_y = center_course.T


    target_speed = 4 #[m/s]
    max_simulate_time = 15.0
    time = 0.0


    state = State(x=x, y=y, yaw=yaw, v=0.0)
    if end_idx == -1:
        last_idx = (start_idx + len(cx)-1) % len(cx)
    else:
        last_idx = end_idx

    x = [state.x]
    y = [state.y]
    yaw = [state.yaw]
    v = [state.v]
    t = [0.0]
    sta_angle = [int(0)]

    target_idx, _ = calc_target_index(state, cx, cy)

    while max_simulate_time >= time:
        ai = pid_control(target_speed, state.v)
        di, target_idx = stanley_control(state, cx, cy, cyaw, target_idx)
        state.update(ai, di)

        sta_angle.append(int(di*57.2957795131))
        time += dt

        x.append(state.x)
        y.append(state.y)
        yaw.append(state.yaw)
        v.append(state.v)
        t.append(time)

        if show_animation:
            plt.cla()
            plt.gcf().canvas.mpl_connect('key_release_event',
                        lambda event: [exit(0) if event.key == 'escape' else None])

            for i in range(len(cx)):
                plt.annotate(i, (cx[i], cy[i]))

            plt.plot(cx, cy, '.r', label='course_interp')

            if center_course is not None:
                plt.plot(center_x, center_y, '.k', label='course_center')

            if inner_course is not None:
                plt.plot(inner_x, inner_y, '.k', label='course_inner')
            
            if outer_course is not None:
                plt.plot(outer_x, outer_y, '.k', label='course_outer')

            plt.plot(x, y, '-b', label='trajectory')

            for i in range(len(x)):
                plt.annotate(sta_angle[i], (x[i], y[i]))

            plt.plot(cx[target_idx], cy[target_idx], 'xg', label='target')
            plt.axis('equal')
            plt.grid(True)
            plt.title('Speed[km/h]:'+str(state.v * 3.6)[:4])
            plt.pause(0.001)


    plt.plot(cx, cy, '.r', label='course_interp')

    for i in range(len(cx)):
        plt.annotate(i, (cx[i], cy[i]))

    plt.plot(x, y, '-b', label='trajectory')

    for i in range(len(x)):
        plt.annotate(sta_angle[i], (x[i], y[i]))

    if center_course is not None:
        plt.plot(center_x, center_y, '.k', label='course_center')

    if inner_course is not None:
        plt.plot(inner_x, inner_y, '.k', label='course_inner')
            
    if outer_course is not None:
        plt.plot(outer_x, outer_y, '.k', label='course_outer')

    plt.legend()
    plt.xlabel('x[m]')
    plt.ylabel('y[m]')
    plt.axis('equal')
    plt.grid(True)

    plt.subplots(1)
    plt.hist(sta_angle, bins=30)

    plt.xlabel('Steering Angle [deg]')
    plt.ylabel('Times')
    plt.grid(True)
    plt.show()



if __name__ == '__main__':
    cx = [7.931820869445801, 8.193934082481203, 8.380947164445661, 8.484098087592619, 8.567660520355355, 8.674428382713392, 8.786793092179519, 8.878025174224224, 8.918737399045934, 8.878873204271606, 8.735721347921434, 8.471736039008716, 8.092476234676447, 7.62599768052205, 7.115889655805235, 6.604404235645347, 6.0997489027947065, 5.60015691282637, 5.10386025703177, 4.609090926702332, 4.114080913129487, 3.6172017240048233, 3.118219108813244, 2.617700848114218, 2.1162243214041982, 1.61436690817964, 1.1127059879369952, 0.6118189401727194, 0.11228314438326643, -0.3853240199349101, -0.8806159352148001, -1.3744068919009835, -1.8679768738884035, -2.3626069514552954, -2.8595781948798935, -3.360171674440434, -3.865668460415151, -4.377349623082281, -4.894004169918627, -5.370758234695282, -5.739890560342982, -6.041210397323377, -6.3325140307895165, -6.609661041385556, -6.88595029629017, -7.180181679371875, -7.484867510544151, -7.778898325483017, -8.007124486066186, -8.105856741830397, -8.076906287074438, -7.906177641444097, -7.594662151981319, -7.1788460778265515, -6.710305785666499, -6.23249470611816, -5.7516691488911835, -5.267430290423499, -4.778025257456778, -4.282332276590316, -3.7847620753108644, -3.2813817513523587, -2.7949105141192114, -2.398924176617767, -2.1726689405554294, -2.19938365691668, -2.4773421281982335, -2.835017160407158, -3.2770765397025494, -3.751216207915419, -4.217421914996428, -4.602120978620428, -4.795680474211973, -4.772750781283822, -4.566115294039165, -4.221760984234223, -3.7752982451717534, -3.2943784674247283, -2.8006589024601216, -2.3191683016426716, -1.899624182851693, -1.590773824974629, -1.3778282843954592, -1.1597349646728576, -0.9450269228116763, -0.7371269281937376, -0.5014924406397181, -0.19295534299211534, 0.18894057260738958, 0.6556354144710601, 1.1591076564862428, 1.6344779219443328, 2.030725008480619, 2.3467324964812413, 2.650811628538369, 2.9695851043401156, 3.3030174232967457, 3.6415796085592342, 3.98614412342794, 4.378980620956809, 4.843788113597927, 5.347501971371443, 5.770834563718549, 5.962961755804898, 5.924788155338291, 5.754768001814441, 5.628889695414512, 5.539030735538584, 5.475851969940215, 5.63552696284906, 6.036863290248405, 6.533622250144403, 7.025619891272272, 7.481324184757837, 7.916114261831222]
    cy = [3.8805994987487793, 3.451124768516468, 2.9932215532588033, 2.5034839866399494, 2.0060558278957936, 1.5171831317414823, 1.0308173464167716, 0.5384579654645895, 0.03942615711750965, -0.46105411065830226, -0.9438577852069664, -1.3807255820553386, -1.7106673893437367, -1.8639742952209692, -1.8990784334005095, -1.9103531286577726, -1.9192170975966933, -1.925685495842545, -1.92977076601553, -1.9314853507358523, -1.9308416926237146, -1.9279100486130112, -1.9233384366199104, -1.9181072288650334, -1.9132007752802487, -1.9096034257974233, -1.908299530348425, -1.910273438865122, -1.9165095012793818, -1.9279920675230722, -1.9452405852132146, -1.965849141439981, -1.986276809391005, -2.0029801606925917, -2.0124157669710465, -2.011040199852675, -1.9953100309637817, -1.9616818319306728, -1.9034295993551227, -1.7580677082699256, -1.4381663939973262, -1.0256217553817153, -0.6208216126311333, -0.20618919110948603, 0.21160890748621947, 0.6152862271910645, 1.0113576203992551, 1.4180525990805077, 1.861460809930437, 2.3533100428551075, 2.8555829611074355, 3.327551652445377, 3.7230989810880457, 3.998132663442539, 4.1851108426883235, 4.336085968284642, 4.468825792698189, 4.592258415851414, 4.69612171055229, 4.765184491958299, 4.799141946792893, 4.80213127059883, 4.700272749305086, 4.39210079975802, 3.945979765995443, 3.447200288085198, 3.0297492853776813, 2.6802050530245265, 2.4475627064177408, 2.2867835377741796, 2.1001965501914928, 1.7849772175466507, 1.3231008559871598, 0.8254045171197332, 0.3661316693682328, 0.002584201826170654, -0.21863741152268004, -0.37603292425767043, -0.4043628581572838, -0.2563079071276614, 0.01510662177627619, 0.40510889723500154, 0.8599131631342186, 1.3097482866705854, 1.7606675167534076, 2.2166172770841674, 2.6567183678904023, 3.050827812148086, 3.3763129230874904, 3.550936630568077, 3.568661412979359, 3.418485627617509, 3.112015774942945, 2.723771473524321, 2.3254137389642384, 1.940990130684057, 1.5689865016504716, 1.200263688823245, 0.8370504425009622, 0.526311504414304, 0.3468625956302567, 0.3700314350995417, 0.62766259409584, 1.0919334125245366, 1.586825276894053, 2.0592986748628404, 2.542786621779649, 3.033813881477456, 3.534838679827227, 4.005114642140215, 4.299148138367079, 4.402509478171675, 4.36026534119456, 4.166468299110038, 3.8911621783605]
    cyaw = [-0.9959955568103878, -1.0772831307155881, -1.2940131018731136, -1.4074599277869055, -1.380222297496865, -1.3404729601426564, -1.3563224591259235, -1.4284791259225138, -1.5604914256544125, -1.7470846566834972, -1.9788068455004495, -2.256585666407383, -2.61900482422017, -2.98986304442432, -3.117085413537575, -3.1217717545101773, -3.1263214872423646, -3.1309937053754004, -3.1357412877768405, -3.140514217044452, 3.1379239999923487, 3.133734337505003, 3.131458956345391, 3.1311500964837227, 3.1327919965297415, 3.136382672492141, -3.141251691561135, -3.133715808961682, -3.1241574462657593, -3.1125265673814626, -3.1021295721386246, -3.0988424302747455, -3.1028256839665005, -3.114036264291046, -3.132325209993312, 3.125759060645626, 3.0942445601218607, 3.0568613733500576, 2.9783845234656874, 2.65857358115086, 2.25518412908887, 2.19472246081364, 2.181711577321672, 2.147696221367074, 2.1723030367414333, 2.2225075333932605, 2.2214928817698327, 2.15387049300285, 1.9079896134874494, 1.6393165790891981, 1.3783724709044074, 1.0635977195322233, 0.7405401233458354, 0.4538662158950174, 0.3316146365928509, 0.2839827943053159, 0.2585072874153025, 0.23537709673816076, 0.1768130709271908, 0.1016391568061913, 0.036395934244452983, -0.0419607636875937, -0.4345616943612031, -0.8707475270072895, -1.349329041515898, -1.9350420234412522, -2.2809924005039663, -2.504390342237228, -2.7708630303813497, -2.8235962591140287, -2.65930147980881, -2.207216126980727, -1.7378695022633146, -1.320532542722549, -0.9867389641308162, -0.6204993366578835, -0.35400090104460313, -0.24421979052898776, 0.1459007252172095, 0.4326991871317911, 0.7244394813299176, 1.0701682640561478, 1.1377756920834814, 1.1139398372833622, 1.1380393983198716, 1.1350665156894684, 0.9982004072051351, 0.8216181906165025, 0.5534576633927488, 0.18130150113946056, -0.1178697029036389, -0.49560799029730296, -0.8055053020025603, -0.9320483273043918, -0.8997713771334378, -0.8564223310454357, -0.8288297611210087, -0.8321493010569181, -0.7658783695435923, -0.5476980805717016, -0.16499581029516203, 0.25899916408066814, 0.8924793836941851, 1.4215610074294216, 1.8582444138678778, 1.889652322505254, 1.7748982737602208, 1.742659801316216, 1.5552125769138931, 0.9337744121753567, 0.3600741732780986, 0.07369153265453908, -0.2620324491533641, -0.5108393025608542, -0.5919643893209786]
    ck = [0.0, -0.3302356014748743, -0.3791607034426091, -0.08048746508914266, 0.1335906386211223, 0.02415775749807865, -0.08742623393418128, -0.2026779589009422, -0.3241495957321804, -0.41287376392482444, -0.504642184831462, -0.5930038862091248, -0.8794479255580158, -0.4897584312649899, -0.03045306565278437, -0.008808878352970046, -0.009202276021406868, -0.009480132974096445, -0.00962903655112066, -0.00964131148061423, -0.009515759290166795, -0.0065605549399476715, -0.002577317551703313, 0.0013329885829098096, 0.005212388328600174, 0.009101673663038214, 0.01304069690817996, 0.017068589126045464, 0.02122385913487705, 0.025544321141988496, 0.013970581008379095, -0.0007020926627198641, -0.015402152113059732, -0.029819747439542795, -0.043622750193316406, -0.05644522453408732, -0.06788998494047956, -0.07755013717646998, -0.3396838528604256, -0.9823289498941672, -0.4328237505045835, 0.04888979894770351, -0.10284365446665991, -0.009806031226323638, 0.10837133404633656, 0.05230801830839606, -0.05607521530694303, -0.28819643802748146, -0.5956464859342497, -0.48323602538881105, -0.5747182649795629, -0.6315410895865166, -0.6698757310647107, -0.4052661922622969, -0.11551845808411615, -0.0736089375511069, -0.02826039787515893, -0.08077047408473535, -0.1532883841009493, -0.1404584724999835, -0.11881405809178618, -0.37796784198439315, -1.0064624920034322, -0.8282266648578832, -1.0075567811095223, -1.3053590378385787, -0.15466546720951868, -0.745309361504769, -0.3091060184640939, 0.10708078759363591, 0.5883232654545736, 1.0107987619483578, 0.8750811565294813, 0.7523430752297012, 0.6379625709346871, 0.8470847659009447, 0.21345035624519762, 0.5270637484028311, 0.7194375522772767, 0.5289328313245976, 0.6453089803565919, 0.49823083327094825, -0.12488069565432626, 0.030804788602719242, 0.03825333393151351, -0.11985876379466971, -0.3918335791121828, -0.3272992220211263, -0.7606202688800915, -0.6165765533628151, -0.680273315270033, -0.7007625308258866, -0.4790167226347036, -0.02902946790852886, 0.08158511914725547, 0.08653247629602995, 0.02398255441194857, -0.01958736858950349, 0.2853772756399821, 0.5901926259713509, 0.84101355009833, 0.909073666904122, 1.385564248754497, 0.8953439848809295, 0.5986568015514122, -0.3104099104785569, -0.14815251211283853, 0.01854211788549857, -0.994012901216544, -1.1696756439233718, -0.8302044579840616, -0.5500827085373374, -0.689716927655273, -0.3169504444246248, -0.01033379929189191]
    s = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 20.0, 20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5, 24.0, 24.5, 25.0, 25.5, 26.0, 26.5, 27.0, 27.5, 28.0, 28.5, 29.0, 29.5, 30.0, 30.5, 31.0, 31.5, 32.0, 32.5, 33.0, 33.5, 34.0, 34.5, 35.0, 35.5, 36.0, 36.5, 37.0, 37.5, 38.0, 38.5, 39.0, 39.5, 40.0, 40.5, 41.0, 41.5, 42.0, 42.5, 43.0, 43.5, 44.0, 44.5, 45.0, 45.5, 46.0, 46.5, 47.0, 47.5, 48.0, 48.5, 49.0, 49.5, 50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5, 54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0]

    simulate(0, -2, np.radians(-180.0), start_idx=0, cx=cx, cy=cy, cyaw=cyaw, ck=ck, s=s)


